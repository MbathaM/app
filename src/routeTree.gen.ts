/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SuccessImport } from './routes/success'
import { Route as PolicyImport } from './routes/policy'
import { Route as AuthImport } from './routes/auth'
import { Route as PublicImport } from './routes/_public'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthPasswordRecoveryImport } from './routes/auth/password-recovery'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as PublicContactImport } from './routes/_public/contact'
import { Route as PublicBlogImport } from './routes/_public/blog'
import { Route as PublicAboutImport } from './routes/_public/about'
import { Route as DashboardProfileImport } from './routes/_dashboard/profile'
import { Route as DashboardDashboardImport } from './routes/_dashboard/dashboard'

// Create Virtual Routes

const UnauthorizedLazyImport = createFileRoute('/unauthorized')()
const UnauthenticatedLazyImport = createFileRoute('/unauthenticated')()

// Create/Update Routes

const UnauthorizedLazyRoute = UnauthorizedLazyImport.update({
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/unauthorized.lazy').then((d) => d.Route))

const UnauthenticatedLazyRoute = UnauthenticatedLazyImport.update({
  path: '/unauthenticated',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/unauthenticated.lazy').then((d) => d.Route),
)

const TermsRoute = TermsImport.update({
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SuccessRoute = SuccessImport.update({
  path: '/success',
  getParentRoute: () => rootRoute,
} as any)

const PolicyRoute = PolicyImport.update({
  path: '/policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)

const AuthPasswordRecoveryRoute = AuthPasswordRecoveryImport.update({
  path: '/password-recovery',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const PublicContactRoute = PublicContactImport.update({
  path: '/contact',
  getParentRoute: () => PublicRoute,
} as any)

const PublicBlogRoute = PublicBlogImport.update({
  path: '/blog',
  getParentRoute: () => PublicRoute,
} as any)

const PublicAboutRoute = PublicAboutImport.update({
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)

const DashboardProfileRoute = DashboardProfileImport.update({
  path: '/profile',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardDashboardRoute = DashboardDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/policy': {
      id: '/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyImport
      parentRoute: typeof rootRoute
    }
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedLazyImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedLazyImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/profile': {
      id: '/_dashboard/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof DashboardProfileImport
      parentRoute: typeof DashboardImport
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutImport
      parentRoute: typeof PublicImport
    }
    '/_public/blog': {
      id: '/_public/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof PublicBlogImport
      parentRoute: typeof PublicImport
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactImport
      parentRoute: typeof PublicImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/auth/password-recovery': {
      id: '/auth/password-recovery'
      path: '/password-recovery'
      fullPath: '/auth/password-recovery'
      preLoaderRoute: typeof AuthPasswordRecoveryImport
      parentRoute: typeof AuthImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  DashboardRoute: DashboardRoute.addChildren({
    DashboardDashboardRoute,
    DashboardProfileRoute,
  }),
  PublicRoute: PublicRoute.addChildren({
    PublicAboutRoute,
    PublicBlogRoute,
    PublicContactRoute,
    PublicIndexRoute,
  }),
  AuthRoute: AuthRoute.addChildren({
    AuthLoginRoute,
    AuthPasswordRecoveryRoute,
    AuthSignupRoute,
  }),
  PolicyRoute,
  SuccessRoute,
  TermsRoute,
  UnauthenticatedLazyRoute,
  UnauthorizedLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/_public",
        "/auth",
        "/policy",
        "/success",
        "/terms",
        "/unauthenticated",
        "/unauthorized"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/dashboard",
        "/_dashboard/profile"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/about",
        "/_public/blog",
        "/_public/contact",
        "/_public/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login",
        "/auth/password-recovery",
        "/auth/signup"
      ]
    },
    "/policy": {
      "filePath": "policy.tsx"
    },
    "/success": {
      "filePath": "success.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/unauthenticated": {
      "filePath": "unauthenticated.lazy.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.lazy.tsx"
    },
    "/_dashboard/dashboard": {
      "filePath": "_dashboard/dashboard.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/profile": {
      "filePath": "_dashboard/profile.tsx",
      "parent": "/_dashboard"
    },
    "/_public/about": {
      "filePath": "_public/about.tsx",
      "parent": "/_public"
    },
    "/_public/blog": {
      "filePath": "_public/blog.tsx",
      "parent": "/_public"
    },
    "/_public/contact": {
      "filePath": "_public/contact.tsx",
      "parent": "/_public"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/password-recovery": {
      "filePath": "auth/password-recovery.tsx",
      "parent": "/auth"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx",
      "parent": "/auth"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
